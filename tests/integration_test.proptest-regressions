# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc d009912b3be17599799dd4dcdb775a0c2db628aee38c597d4f23dbb32191a007 # shrinks to (base_pool, reward1_pool, reward2_pool) = (OsmosisTestPool { liquidity: [Coin { denom: "denom1", amount: Uint128(13816039205555307098) }, Coin { denom: "denom4", amount: Uint128(15937399967966375302) }, Coin { denom: "denom7", amount: Uint128(8535859276017474524) }], pool_type: Basic }, OsmosisTestPool { liquidity: [Coin { denom: "denom0", amount: Uint128(883046781992611657) }, Coin { denom: "denom1", amount: Uint128(3869447117824314502) }, Coin { denom: "denom5", amount: Uint128(9649809617682566157) }], pool_type: Balancer { pool_weights: [3727, 458979, 120072] } }, Some(OsmosisTestPool { liquidity: [Coin { denom: "denom1", amount: Uint128(10896275176369680937) }, Coin { denom: "denom3", amount: Uint128(2731666620558727337) }, Coin { denom: "denom6", amount: Uint128(7644547491043231950) }, Coin { denom: "denom7", amount: Uint128(7129540040585168336) }], pool_type: Basic })), reward2_amount = 53094978, performance_permille = 934
cc f1e85e6e6a0f7939a7c2686cfbe0b5c65c45d9b32fedd7e2ed19ab397013cce8 # shrinks to (base_pool, reward1_pool, reward2_pool) = (OsmosisTestPool { liquidity: [Coin { denom: "denom0", amount: Uint128(2679879574166023911) }, Coin { denom: "denom1", amount: Uint128(7648789566084449654) }, Coin { denom: "denom2", amount: Uint128(10005454655475802658) }, Coin { denom: "denom3", amount: Uint128(11615711081119396268) }, Coin { denom: "denom4", amount: Uint128(5208168845419811499) }, Coin { denom: "denom7", amount: Uint128(10155154065624214248) }], pool_type: StableSwap { scaling_factors: [1939865345428350006, 4449948982350287566, 7171078917301083343, 5243455641393719771, 3600388714468432446, 4444657506574006644] } }, OsmosisTestPool { liquidity: [Coin { denom: "denom2", amount: Uint128(17201928732807723032) }, Coin { denom: "denom3", amount: Uint128(2948913522573778346) }], pool_type: StableSwap { scaling_factors: [532237626936726651, 2338538950692685766] } }, None), reward2_amount = 15107703, performance_permille = 113
cc 86860f1ea3936f0d1b3394a8a42e389fd206e30f6a9a42bd5e8b58eed7b77f35 # shrinks to (base_pool, reward1_pool, reward2_pool) = (OsmosisTestPool { liquidity: [Coin { denom: "denom0", amount: Uint128(6593672458937806079) }, Coin { denom: "denom1", amount: Uint128(10639483345749979338) }, Coin { denom: "denom3", amount: Uint128(2710903568816893528) }, Coin { denom: "denom4", amount: Uint128(2007679107048809416) }, Coin { denom: "denom7", amount: Uint128(13428513499285439097) }], pool_type: Basic }, OsmosisTestPool { liquidity: [Coin { denom: "denom0", amount: Uint128(7243434378684398963) }, Coin { denom: "denom3", amount: Uint128(17848518630940434553) }, Coin { denom: "denom6", amount: Uint128(18203995975055521967) }], pool_type: StableSwap { scaling_factors: [1, 64029528257572786, 1503239057123572443] } }, Some(OsmosisTestPool { liquidity: [Coin { denom: "denom1", amount: Uint128(938828755834533948) }, Coin { denom: "denom2", amount: Uint128(17842221098835783054) }, Coin { denom: "denom6", amount: Uint128(16631955803817856128) }, Coin { denom: "denom7", amount: Uint128(14101896859166816047) }], pool_type: StableSwap { scaling_factors: [339808380224575537, 8474640146899619790, 7005011152856293870, 8350370473303773037] } })), reward2_amount = 44759108, performance_permille = 391
